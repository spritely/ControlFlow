// --------------------------------------------------------------------------------------------------------------------
// <copyright file="BackOffStrategyTest.cs">
//   Copyright (c) 2017. All rights reserved.
//   Licensed under the MIT license. See LICENSE file in the project root for full license information.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in Spritely.Redo source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace Spritely.Redo.Test
{
    using System;
    using System.Threading.Tasks;
    using FluentAssertions;
    using Xunit;

    public class BackOffStrategyTest
    {
        private Action Action(Action act) => () => act();

        [Fact]
        public void Constructor_throws_on_null_arguments()
        {
            Action(() => new BackOffStrategy(null)).ShouldNotThrow<ArgumentNullException>();
        }

        [Fact]
        public void WithMaxRetries_throws_on_argument_less_than_1()
        {
            var backOffStrategy = new BackOffStrategy(_ => TimeSpan.FromSeconds(1));

            Action(() => backOffStrategy.WithMaxRetries(0)).ShouldThrow<ArgumentOutOfRangeException>();
            Action(() => backOffStrategy.WithMaxRetries(-5)).ShouldThrow<ArgumentOutOfRangeException>();
        }

        [Fact]
        public void WithReporter_throws_on_null_arguments()
        {
            var backOffStrategy = new BackOffStrategy(_ => TimeSpan.FromSeconds(1));
            Action(() => backOffStrategy.WithReporter(null)).ShouldThrow<ArgumentNullException>();
        }

        [Fact]
        public void Run_action_throws_on_null_arguments()
        {
            var backOffStrategy = new BackOffStrategy(_ => TimeSpan.FromSeconds(1));
            Action(() => backOffStrategy.Run(null as Action)).ShouldThrow<ArgumentNullException>();
        }

        [Fact]
        public void RunAsync_action_throws_on_null_arguments()
        {
            var backOffStrategy = new BackOffStrategy(_ => TimeSpan.FromSeconds(1));
            Action(() => backOffStrategy.RunAsync(null as Func<Task>)).ShouldThrow<ArgumentNullException>();
        }

        [Fact]
        public void Run_function_throws_on_null_arguments()
        {
            var backOffStrategy = new BackOffStrategy(_ => TimeSpan.FromSeconds(1));
            Action(() => backOffStrategy.Run(null as Func<object>)).ShouldThrow<ArgumentNullException>();
        }

        [Fact]
        public void RunAsync_function_throws_on_null_arguments()
        {
            var backOffStrategy = new BackOffStrategy(_ => TimeSpan.FromSeconds(1));
            Action(() => backOffStrategy.RunAsync(null as Func<Task<object>>)).ShouldThrow<ArgumentNullException>();
        }
    }
}
