// --------------------------------------------------------------------------------------------------------------------
// <copyright file="BackoffStrategyTest.cs">
//   Copyright (c) 2016. All rights reserved.
//   Licensed under the MIT license. See LICENSE file in the project root for full license information.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in Spritely.Redo source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace Spritely.Redo.Test
{
    using System;
    using System.Threading.Tasks;
    using NUnit.Framework;

    [TestFixture]
    public class BackoffStrategyTest
    {
        [Test]
        public void Constructor_throws_on_null_arguments()
        {
            Assert.Throws<ArgumentNullException>(() => new BackoffStrategy(null));
        }

        [Test]
        public void WithMaxRetries_throws_on_argument_less_than_1()
        {
            var backoffStrategy = new BackoffStrategy(_ => TimeSpan.FromSeconds(1));
            Assert.Throws<ArgumentOutOfRangeException>(() => backoffStrategy.WithMaxRetries(0));
            Assert.Throws<ArgumentOutOfRangeException>(() => backoffStrategy.WithMaxRetries(-5));
        }

        [Test]
        public void WithReporter_throws_on_null_arguments()
        {
            var backoffStrategy = new BackoffStrategy(_ => TimeSpan.FromSeconds(1));
            Assert.Throws<ArgumentNullException>(() => backoffStrategy.WithReporter(null));
        }

        [Test]
        public void Run_action_throws_on_null_arguments()
        {
            var backoffStrategy = new BackoffStrategy(_ => TimeSpan.FromSeconds(1));
            Assert.Throws<ArgumentNullException>(() => backoffStrategy.Run(null as Action));
        }

        [Test]
        public void RunAsync_action_throws_on_null_arguments()
        {
            var backoffStrategy = new BackoffStrategy(_ => TimeSpan.FromSeconds(1));
            Assert.Throws<ArgumentNullException>(() => backoffStrategy.RunAsync(null as Func<Task>));
        }

        [Test]
        public void Run_function_throws_on_null_arguments()
        {
            var backoffStrategy = new BackoffStrategy(_ => TimeSpan.FromSeconds(1));
            Assert.Throws<ArgumentNullException>(() => backoffStrategy.Run(null as Func<object>));
        }

        [Test]
        public void RunAsync_function_throws_on_null_arguments()
        {
            var backoffStrategy = new BackoffStrategy(_ => TimeSpan.FromSeconds(1));
            Assert.Throws<ArgumentNullException>(() => backoffStrategy.RunAsync(null as Func<Task<object>>));
        }
    }
}
