// --------------------------------------------------------------------------------------------------------------------
// <copyright file="TryAction.cs">
//   Copyright (c) 2016. All rights reserved.
//   Licensed under the MIT license. See LICENSE file in the project root for full license information.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in Spritely.Redo source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace Spritely.Redo
{
    using System;
    using Spritely.Redo.Internal;

    /// <summary>
    ///     Part of fluent API when user calls Try.Running() with an action.
    /// </summary>
#if !SpritelyRecipesProject
    [System.Diagnostics.DebuggerStepThrough]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("Spritely.Recipes", "See package version number")]
#pragma warning disable 0436
#endif
    public partial class TryAction : TryOperation<TryAction>
    {
        private readonly Action f;
        internal Func<Func<object>, Func<object, bool>, TryConfiguration, object> _until = Run.Until;

        /// <summary>
        ///     Initializes a new instance of the <see cref="TryAction" /> class.
        /// </summary>
        /// <param name="action">The action to call with retries.</param>
        /// <exception cref="System.ArgumentNullException">f;Running requires a valid function to call.</exception>
        public TryAction(Action action)
        {
            if (action == null)
            {
                throw new ArgumentNullException("action", "Running requires a valid function to call.");
            }

            f = action;
        }

        /// <summary>
        ///     Initiates the call and retries until the specified condition is satisfied or the retry strategy cancels the
        ///     request.
        /// </summary>
        /// <param name="satisfied">The operation that determines success.</param>
        public void Until(Func<bool> satisfied)
        {
            // Converting Action into a Func<object> so Run logic can be shared
            Func<object> function = () =>
            {
                f();
                return null;
            };

            _until(function, _ => satisfied(), _configuration);
        }
    }
#if !SpritelyRecipesProject
#pragma warning restore 0436
#endif
}
